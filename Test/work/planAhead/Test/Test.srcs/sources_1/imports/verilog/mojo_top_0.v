/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg pin_a,
    output reg pin_b,
    output reg pin_c,
    input carry,
    input sum
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam START_state = 2'd0;
  localparam COMPUTE_state = 2'd1;
  localparam SUCCESS_state = 2'd2;
  localparam ERROR_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = START_state;
  reg [24:0] M_count_d, M_count_q = 1'h0;
  reg M_number_count_d, M_number_count_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_count_d = M_count_q;
    M_number_count_d = M_number_count_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    pin_a = 1'h1;
    pin_b = 1'h1;
    pin_c = 1'h1;
    
    case (M_state_q)
      START_state: begin
        M_count_d = 25'h0000000;
        M_number_count_d = 1'h0;
        pin_a = M_count_q[24+0-:1];
        pin_b = M_count_q[23+0-:1];
        pin_c = M_count_q[22+0-:1];
        if (sum == 1'h0 && carry == 1'h0) begin
          M_state_d = COMPUTE_state;
          io_led[0+(M_number_count_q)*1+0-:1] = 8'hff;
          M_number_count_d = M_number_count_q + 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      COMPUTE_state: begin
        M_count_d = M_count_q + 1'h1;
        pin_a = M_count_q[24+0-:1];
        pin_b = M_count_q[23+0-:1];
        pin_c = M_count_q[22+0-:1];
        if ((M_count_q[24+0-:1] ^ M_count_q[23+0-:1] ^ M_count_q[22+0-:1] == sum) && ((M_count_q[24+0-:1] & M_count_q[23+0-:1]) | (M_count_q[22+0-:1] & (M_count_q[24+0-:1] ^ M_count_q[23+0-:1]))) == carry) begin
          io_led[0+(M_number_count_q)*1+0-:1] = 1'h1;
          M_number_count_d = M_number_count_q + 1'h1;
          if (M_number_count_q == 4'h8) begin
            M_state_d = SUCCESS_state;
          end else begin
            M_state_d = COMPUTE_state;
          end
        end else begin
          M_state_d = ERROR_state;
        end
      end
      SUCCESS_state: begin
        io_led[8+0+0-:1] = 1'h1;
      end
      ERROR_state: begin
        io_led[16+0+0-:1] = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_count_q <= 1'h0;
      M_number_count_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_count_q <= M_count_d;
      M_number_count_q <= M_number_count_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
