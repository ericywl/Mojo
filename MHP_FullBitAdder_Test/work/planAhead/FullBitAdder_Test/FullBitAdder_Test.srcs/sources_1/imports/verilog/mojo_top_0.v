/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg pin_a,
    output reg pin_b,
    output reg pin_c,
    input carry,
    input sum
  );
  
  
  
  reg rst;
  
  wire [2-1:0] M_adder_out;
  reg [1-1:0] M_adder_a;
  reg [1-1:0] M_adder_b;
  reg [1-1:0] M_adder_c;
  adder_1 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .c(M_adder_c),
    .out(M_adder_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam START_state = 4'd0;
  localparam STATE000_state = 4'd1;
  localparam STATE001_state = 4'd2;
  localparam STATE010_state = 4'd3;
  localparam STATE011_state = 4'd4;
  localparam STATE100_state = 4'd5;
  localparam STATE101_state = 4'd6;
  localparam STATE110_state = 4'd7;
  localparam STATE111_state = 4'd8;
  localparam MANUALTEST_state = 4'd9;
  localparam SUCCESS_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  reg [25:0] M_timer_d, M_timer_q = 1'h0;
  
  reg x;
  
  reg y;
  
  reg cin;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer_d = M_timer_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    pin_a = 1'h0;
    pin_b = 1'h0;
    pin_c = 1'h0;
    M_adder_a = io_dip[0+7+0-:1];
    M_adder_b = io_dip[0+6+0-:1];
    M_adder_c = io_dip[0+5+0-:1];
    
    case (M_state_q)
      START_state: begin
        M_timer_d = 26'h0000000;
        io_led[16+7+0-:1] = 1'h1;
        if (io_button[0+0-:1]) begin
          M_state_d = STATE000_state;
        end
        if (io_button[2+0-:1]) begin
          M_state_d = MANUALTEST_state;
        end
      end
      MANUALTEST_state: begin
        x = io_dip[0+7+0-:1];
        y = io_dip[0+6+0-:1];
        cin = io_dip[0+5+0-:1];
        pin_a = x;
        pin_b = y;
        pin_c = cin;
        io_led[0+2+0-:1] = x;
        io_led[0+1+0-:1] = y;
        io_led[0+0+0-:1] = cin;
        io_led[8+0+1-:2] = M_adder_out;
        if (io_button[1+0-:1]) begin
          M_state_d = START_state;
        end
      end
      STATE000_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[8+0+0-:1] = 1'h1;
        pin_a = 1'h0;
        pin_b = 1'h0;
        pin_c = 1'h0;
        if (carry == 1'h0 && sum == 1'h0 && M_timer_q == 26'h3ffffff) begin
          M_state_d = STATE001_state;
        end
      end
      STATE001_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+0+0-:1] = 1'h1;
        io_led[8+0+1-:2] = 2'h3;
        pin_a = 1'h0;
        pin_b = 1'h0;
        pin_c = 1'h1;
        if (carry == 1'h0 && sum == 1'h1 && M_timer_q == 26'h3ffffff) begin
          M_state_d = STATE010_state;
        end
      end
      STATE010_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+1+0-:1] = 1'h1;
        io_led[8+0+2-:3] = 3'h7;
        pin_a = 1'h0;
        pin_b = 1'h1;
        pin_c = 1'h0;
        if (carry == 1'h0 && sum == 1'h1 && M_timer_q == 26'h3ffffff) begin
          M_state_d = STATE011_state;
        end
      end
      STATE011_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+0+1-:2] = 2'h3;
        io_led[8+0+3-:4] = 4'hf;
        pin_a = 1'h0;
        pin_b = 1'h1;
        pin_c = 1'h1;
        if (carry == 1'h1 && sum == 1'h0 && M_timer_q == 26'h3ffffff) begin
          M_state_d = STATE100_state;
          io_led[8+0+3-:4] = 4'h1;
        end
      end
      STATE100_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+2+0-:1] = 1'h1;
        io_led[8+0+4-:5] = 5'h1f;
        pin_a = 1'h1;
        pin_b = 1'h0;
        pin_c = 1'h0;
        if (carry == 1'h0 && sum == 1'h1 && M_timer_q == 26'h3ffffff) begin
          M_state_d = STATE101_state;
        end
      end
      STATE101_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+0+2-:3] = 3'h5;
        io_led[8+0+5-:6] = 6'h3f;
        pin_a = 1'h1;
        pin_b = 1'h0;
        pin_c = 1'h1;
        if (carry == 1'h1 && sum == 1'h0 && M_timer_q == 26'h3ffffff) begin
          M_state_d = STATE110_state;
        end
      end
      STATE110_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+1+1-:2] = 2'h3;
        io_led[8+0+6-:7] = 7'h7f;
        pin_a = 1'h1;
        pin_b = 1'h1;
        pin_c = 1'h0;
        if (carry == 1'h1 && sum == 1'h0 && M_timer_q == 26'h3ffffff) begin
          M_state_d = STATE111_state;
        end
      end
      STATE111_state: begin
        M_timer_d = M_timer_q + 1'h1;
        io_led[0+0+2-:3] = 3'h7;
        io_led[8+0+7-:8] = 8'hff;
        pin_a = 1'h1;
        pin_b = 1'h1;
        pin_c = 1'h1;
        if (carry == 1'h1 && sum == 1'h1 && M_timer_q == 26'h3ffffff) begin
          M_state_d = SUCCESS_state;
        end
      end
      SUCCESS_state: begin
        pin_a = 1'h0;
        pin_b = 1'h0;
        pin_c = 1'h0;
        io_led[16+0+0-:1] = 1'h1;
        if (io_button[1+0-:1]) begin
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
