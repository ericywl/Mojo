module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield

    // outputs A, B and C to the input of the full-bit adder
    output pin_a,
    output pin_b,
    output pin_c,

    // inputs from the carry and sum output of the full-bit adder
    input carry,
    input sum
  ) {
  
  sig rst;                  // reset signal
  
  adder adder;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {    
      fsm state(#INIT(START)) = {START, STATE000, STATE001, STATE010, STATE011, STATE100, STATE101, STATE110, STATE111, MANUALTEST, SUCCESS};
      
      dff timer[26];
    }
  }
  
    // declaring signal variable
    sig x;
    sig y;
    sig cin;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off        
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // initialize inputs A, B and C
    pin_a = 0;
    pin_b = 0;
    pin_c = 0;
    
    // set input of adder module to dip switches
    adder.a = io_dip[0][7];
    adder.b = io_dip[0][6];
    adder.c = io_dip[0][5];
    
    // FSM
    case (state.q) {
      state.START:
        timer.d = 26x{0};
        io_led[2][7] = 1;
        if (io_button[0]) {
          state.d = state.STATE000;
          }
        if (io_button[2]) {
          state.d = state.MANUALTEST;
          }
          
      // manual testing state by using dip switches as input
      // the dip switches used are the same as the inputs of adder module
      state.MANUALTEST:
        x = io_dip[0][7];
        y = io_dip[0][6];
        cin = io_dip[0][5];
        pin_a = x;
        pin_b = y;
        pin_c = cin;

        // show inputs on the first IO LED segment
        io_led[0][2] = x;
        io_led[0][1] = y;
        io_led[0][0] = cin;

        // set second IO LED segment to display the output of adder module
        // if this output is the same as the stripboard LEDs, then the full-bit adder is correct
        io_led[1][1:0] = adder.out; 
        if (io_button[1]) {
          state.d = state.START;
          }
        

      // STATE000 to STATE111 are the automatic testing stages
      // the FPGA go through each state and test the input against the output of the full-bit adder at constant time
      // if the full-bit adder is correct, the FPGA will proceed to the next state
      // if it is wrong, the FPGA will remain at the incorrect state
      state.STATE000:
        timer.d = timer.q + 1;
        io_led[1][0] = 1;
        pin_a = 0;
        pin_b = 0;
        pin_c = 0;
        if (carry == 0 && sum == 0 && timer.q == 26x{1}) {
          state.d = state.STATE001;
          }
      
      state.STATE001:
        timer.d = timer.q + 1;
        io_led[0][0] = 1;
        io_led[1][1:0] = 2x{1};
        pin_a = 0;
        pin_b = 0;
        pin_c = 1;
        if (carry == 0 && sum == 1 && timer.q == 26x{1}) {
          state.d = state.STATE010;
          }
        
      state.STATE010:
        timer.d = timer.q + 1;
        io_led[0][1] = 1;
        io_led[1][2:0] = 3x{1};
        pin_a = 0;
        pin_b = 1;
        pin_c = 0;
        if (carry == 0 && sum == 1 && timer.q == 26x{1}) {
          state.d = state.STATE011;
          } 
      
      state.STATE011:
        timer.d = timer.q + 1;
        io_led[0][1:0] = 2x{1};
        io_led[1][3:0] = 4x{1};
        pin_a = 0;
        pin_b = 1;
        pin_c = 1;
        if (carry == 1 && sum == 0 && timer.q == 26x{1}) {
          state.d = state.STATE100;
          io_led[1][0+:4] = 4b1;
          }
        
      state.STATE100:
        timer.d = timer.q + 1;
        io_led[0][2] = 1;
        io_led[1][4:0] = 5x{1};
        pin_a = 1;
        pin_b = 0;
        pin_c = 0;
        if (carry == 0 && sum == 1 && timer.q == 26x{1}) {
          state.d = state.STATE101;
          }
        
      state.STATE101:
        timer.d = timer.q + 1;
        io_led[0][2:0] = c{1, 0, 1};
        io_led[1][5:0] = 6x{1};
        pin_a = 1;
        pin_b = 0;
        pin_c = 1;
        if (carry == 1 && sum == 0 && timer.q == 26x{1}) {
          state.d = state.STATE110;
          }
        
      state.STATE110:
        timer.d = timer.q + 1;
        io_led[0][2:1] = 2x{1};
        io_led[1][6:0] = 7x{1};
        pin_a = 1;
        pin_b = 1;
        pin_c = 0;
        if (carry == 1 && sum == 0 && timer.q == 26x{1}) {
          state.d = state.STATE111;
          }
        
      state.STATE111:
        timer.d = timer.q + 1;
        io_led[0][2:0] = 3x{1};
        io_led[1][7:0] = 8x{1};
        pin_a = 1;
        pin_b = 1;
        pin_c = 1;
        if (carry == 1 && sum == 1 && timer.q == 26x{1}) {
          state.d = state.SUCCESS;
          }
      
      // if all automatic testing stages are succesful, 
      // the first LED in the last IO LED segment will light up               
      state.SUCCESS:
        pin_a = 0;
        pin_b = 0;
        pin_c = 0;
        io_led[2][0] = 1;  
        if (io_button[1]) {
          state.d = state.START;      
        }
      }
  }
}