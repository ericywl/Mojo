/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_alu8_alu;
  wire [1-1:0] M_alu8_z;
  wire [1-1:0] M_alu8_v;
  wire [1-1:0] M_alu8_n;
  reg [8-1:0] M_alu8_a;
  reg [8-1:0] M_alu8_b;
  reg [6-1:0] M_alu8_alufn;
  alu8_1 alu8 (
    .a(M_alu8_a),
    .b(M_alu8_b),
    .alufn(M_alu8_alufn),
    .alu(M_alu8_alu),
    .z(M_alu8_z),
    .v(M_alu8_v),
    .n(M_alu8_n)
  );
  
  wire [6-1:0] M_test8_alufn;
  wire [16-1:0] M_test8_alu8_in;
  wire [1-1:0] M_test8_result;
  wire [2-1:0] M_test8_states;
  reg [1-1:0] M_test8_clk;
  reg [1-1:0] M_test8_rst;
  reg [8-1:0] M_test8_alu8_out;
  reg [1-1:0] M_test8_trigger;
  alu8_test_format_2 test8 (
    .clk(M_test8_clk),
    .rst(M_test8_rst),
    .alu8_out(M_test8_alu8_out),
    .trigger(M_test8_trigger),
    .alufn(M_test8_alufn),
    .alu8_in(M_test8_alu8_in),
    .result(M_test8_result),
    .states(M_test8_states)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_test8_clk = clk;
    M_test8_rst = rst;
    M_test8_trigger = 1'h0;
    M_test8_alu8_out = M_alu8_alu;
    M_alu8_alufn = 6'h00;
    M_alu8_a = 8'h00;
    M_alu8_b = 8'h00;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    
    case (io_dip[16+7+0-:1])
      1'h1: begin
        M_test8_trigger = 1'h1;
        M_alu8_alufn = M_test8_alufn;
        M_alu8_a = M_test8_alu8_in[8+7-:8];
        M_alu8_b = M_test8_alu8_in[0+7-:8];
        io_led[0+7-:8] = M_alu8_alu;
        M_test8_alu8_out = M_alu8_alu;
        led[0+1-:2] = M_test8_states;
        led[7+0-:1] = M_test8_result;
      end
      1'h0: begin
        io_led[0+7-:8] = M_alu8_alu;
        M_alu8_alufn = io_dip[16+0+5-:6];
        M_alu8_a = io_dip[0+7-:8];
        M_alu8_b = io_dip[8+7-:8];
      end
    endcase
  end
endmodule
