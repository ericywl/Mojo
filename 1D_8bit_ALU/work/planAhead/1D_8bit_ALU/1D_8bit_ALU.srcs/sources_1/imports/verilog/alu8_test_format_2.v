/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu8_test_format_2 (
    input clk,
    input rst,
    input [7:0] alu8_out,
    input trigger,
    output reg [5:0] alufn,
    output reg [15:0] alu8_in,
    output reg result,
    output reg [1:0] states
  );
  
  
  
  wire [6-1:0] M_testcases_alufn;
  wire [96-1:0] M_testcases_testcases;
  wire [2-1:0] M_testcases_state;
  reg [3-1:0] M_testcases_count;
  alu8_testcases_8 testcases (
    .count(M_testcases_count),
    .alufn(M_testcases_alufn),
    .testcases(M_testcases_testcases),
    .state(M_testcases_state)
  );
  
  reg [95:0] cases;
  
  reg [2:0] M_count_d, M_count_q = 1'h0;
  reg [24:0] M_timer_d, M_timer_q = 1'h0;
  localparam IDLE_state = 3'd0;
  localparam TEST1_state = 3'd1;
  localparam TEST2_state = 3'd2;
  localparam TEST3_state = 3'd3;
  localparam TEST4_state = 3'd4;
  localparam SUCCESS_state = 3'd5;
  localparam DONE_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_count_d = M_count_q;
    M_timer_d = M_timer_q;
    
    M_count_d = 4'h0;
    M_testcases_count = M_count_q;
    alufn = M_testcases_alufn;
    cases = M_testcases_testcases;
    alufn = 6'h00;
    alu8_in = 16'h0000;
    result = 1'h1;
    states[0+1-:2] = M_testcases_state;
    
    case (M_state_q)
      IDLE_state: begin
        M_timer_d = 25'h0000000;
        if (trigger == 1'h1) begin
          M_state_d = TEST1_state;
        end
      end
      TEST1_state: begin
        M_timer_d = M_timer_q + 1'h1;
        alu8_in = cases[72+8+15-:16];
        if (alu8_out == cases[72+0+7-:8] && M_timer_q == 25'h1ffffff) begin
          M_state_d = TEST2_state;
        end
      end
      TEST2_state: begin
        M_timer_d = M_timer_q + 1'h1;
        alu8_in = cases[48+8+15-:16];
        if (alu8_out == cases[48+0+7-:8] && M_timer_q == 25'h1ffffff) begin
          M_state_d = TEST3_state;
        end
      end
      TEST3_state: begin
        M_timer_d = M_timer_q + 1'h1;
        alu8_in = cases[24+8+15-:16];
        if (alu8_out == cases[24+0+7-:8] && M_timer_q == 25'h1ffffff) begin
          M_state_d = TEST4_state;
        end
      end
      TEST4_state: begin
        M_timer_d = M_timer_q + 1'h1;
        alu8_in = cases[0+8+15-:16];
        if (alu8_out == cases[0+0+7-:8] && M_timer_q == 25'h1ffffff) begin
          M_state_d = SUCCESS_state;
        end
      end
      SUCCESS_state: begin
        M_count_d = M_count_q + 1'h1;
        if (M_count_q == 4'h2) begin
          M_state_d = DONE_state;
        end
        M_state_d = TEST1_state;
      end
      DONE_state: begin
        result = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_count_q <= 1'h0;
      M_timer_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_count_q <= M_count_d;
      M_timer_q <= M_timer_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
