module alu8_testcases (
        input clk,
        input rst,
        input alu8_out[8],
        output alufn[6],
        output alu8_in[2][8],
        output result
    ) {

    .clk(clk), .rst(rst) {
        counter timer (#SIZE(2), #DIV(25));
        counter alufn_select (#SIZE(4), #DIV(27));
    }

    sig cases[4][3][8];

    // test cases are not yet generated
    always {
        case(alufn_select.value) {
            4d0:
                // ADD
                alufn = b000000;
                cases = {
                    {8d0, 8d0, 8d0},
                    {8d1, 8d1, 8d2},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0}
                };

            4d1:
                // SUB
                alufn = b000001;
                cases = {
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0}
                };

            4d2:
                // MUL
                alufn = b000010;
                cases = {
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0}
                };

            4d3:
                alufn = b000000;
                cases = {
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0}
                };

            4d4:
                alufn = b000000;
                cases = {
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0}
                };

            default:
                alufn = b000000;
                cases = {
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0},
                    {8d0, 8d0, 8d0}
                };

        }

        alu8_in = cases[timer.value][2:1];
        result = (alu8_out == cases[timer.value][0]);
    }
    
}