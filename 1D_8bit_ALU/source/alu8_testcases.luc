module alu8_testcases (
        input clk,
        input rst,
        input alu8_out[8],
        output alufn[6],
        output alu8_in[2][8],
        output result
    ) {

    .clk(clk), .rst(rst) {
        counter timer (#SIZE(2), #DIV(26));
        counter alufn_select (#SIZE(4), #DIV(28));
    }

    sig cases[4][3][8];

    // test cases are not yet generated
    always {
        case(alufn_select.value) {
            4d0:
                // ADD
                alufn = b000000;
                cases = {
                    {8h02, 8h02, 8h04},     // 2 + 2 = 4    
                    {8h3c, 8h3e, 8h7a},     // 60 + 62 = 122 
                    {8h78, 8h07, 8h7f},     // 120 + 7 = 127
                    {8h7f, 8h01, 8h80}      // 127 + 1 = 128, overflow
                };

            4d1:
                // SUB
                alufn = b000001;
                cases = {
                    {8h0b, 8h6f, 8h9c},     // 11 - 111 = -100    
                    {8h88, 8hec, 8h9c},     // -120 - (-20) = -100
                    {8h80, 8h07, 8h79},     // -128 - 7 = -135, underflow
                    {8h1c, 8h9c, 8h80}      // 28 - (-100) = 128, overflow
                };

            4d2:
                // MUL
                alufn = b000010;
                cases = {
                    {8h08, 8h02, 8h10},     // 8 * 2 = 16
                    {8hfd, 8h28, 8h88},     // -3 * 40 = -120
                    {8hf4, 8hf7, 8h6c},     // -12 * -9 = 108
                    {8h64, 8h03, 8h2c}      // 100 * 3 = 300, overflow
                };

            4d3:
                // AND
                alufn = b011000;
                cases = {
                    {8h01, 8h00, 8h00},     // b0000 0001 & b0000 0000 = b0000 0000
                    {8hb5, 8h5a, 8h10},     // b1011 0101 & b0101 1010 = b0001 0000
                    {8h7b, 8h6e, 8h6a},     // b0111 1011 & b0110 1110 = b0110 1010
                    {8hff, 8hff, 8hff}      // b1111 1111 & b1111 1111 = b1111 1111
                };

            4d4:
                // OR
                alufn = b011110;
                cases = {
                    {8h01, 8h00, 8h01},     // b0000 0001 & b0000 0000 = b0000 0001
                    {8h55, 8haa, 8hff},     // b0101 0101 & b1010 1010 = b1111 1111
                    {8hff, 8hff, 8hff},     // b1111 1111 & b1111 1111 = b1111 1111
                    {8hc4, 8h49, 8hcd}      // b1100 0100 & b0100 1001 = b1100 1101
                };

            4d5:
                // XOR
                alufn = b010110;
                cases = {
                    {8h01, 8h00, 8h01},     // b0000 0001 & b0000 0000 = b0000 0001
                    {8h55, 8haa, 8hff},     // b0101 0101 & b1010 1010 = b1111 1111
                    {8hf0, 8hf0, 8h00},     // b1111 0000 & b1111 0000 = b0000 0000
                    {8h93, 8h94, 8h07}      // b1001 0011 & b1001 0100 = b0000 0111
                };

            4d6:
                // NOR
                alufn = b010001;
                cases = {
                    {8h01, 8h00, 8hfe},     // b0000 0001 & b0000 0000 = b1111 1110
                    {8h55, 8haa, 8h00},     // b0101 0101 & b1010 1010 = b0000 0000
                    {8hf0, 8hf0, 8h0f},     // b1111 0000 & b1111 0000 = b0000 1111
                    {8h4b, 8h65, 8h90}      // b0100 1011 & b0110 0101 = b1001 0000
                };

            4d7:
                // NAND
                alufn = b010111;
                cases = {
                    {8h01, 8h00, 8hff},     // b0000 0001 & b0000 0000 = b1111 1111 
                    {8h55, 8haa, 8hff},     // b0101 0101 & b1010 1010 = b1111 1111
                    {8hf0, 8hf0, 8h0f},     // b1111 0000 & b1111 0000 = b0000 1111
                    {8h26, 8hb8, 8hdf}      // b0010 0110 & b1011 1000 = b1101 1111
                };
            4d8:
                // "A"
                alufn = b011010;
                cases = {
                    // output A regardless of B
                    {8h26, 8h04, 8h26},     
                    {8hff, 8hff, 8hff},
                    {8he6, 8hdd, 8he6},
                    {8h5b, 8ha6, 8h5b}
                };

            4d9:
                // SHL
                alufn = b100000;
                cases = {
                    {8h6e, 8h02, 8hb8},     // b0110 1110 << 2 = b1011 1000
                    {8h08, 8h07, 8h00},     // b0000 1000 << 7 = b0000 0000
                    {8hca, 8h00, 8hca},     // b1100 1010 << 0 = b1100 1010
                    {8hdf, 8h01, 8hbe}      // b1101 1111 << 1 = b1011 1110
                };

            4d10:
                // SHR
                alufn = b100001;
                cases = {
                    {8hb5, 8h01, 8h5a},     // b1011 0101 >> 1 = b0101 1010     
                    {8ha3, 8h03, 8h14},     // b1010 0011 >> 3 = b0001 0100 
                    {8he1, 8h07, 8h01},     // b1110 0001 >> 7 = b0000 0001
                    {8h78, 8h00, 8h78}      // b0111 1000 >> 0 = b0111 1000
                };

            4d11:
                // SRA
                alufn = b100011;
                cases = {
                    {8h95, 8h04, 8hf9},     // b1001 0101 >>> 4 = b1111 1001
                    {8h6e, 8h07, 8h00},     // b0110 1110 >>> 7 = b0000 0000
                    {8h90, 8h02, 8he4},     // b1001 0000 >>> 2 = b1110 0100
                    {8h83, 8h00, 8h83}      // b1000 0011 >>> 0 = b1000 0011
                };

            4d12:
                // CMPEQ
                alufn = b110011;
                cases = {
                    {8h7f, 8h7f, 8h01},     // 127 = 127
                    {8hc0, 8hc0, 8h01},     // -64 = -64
                    {8h00, 8h00, 8h01},     // 0 = 0
                    {8h9c, 8h0a, 8h00}      // -100 != 10
                };

            4d13:
                // CMPLT
                alufn = b110101;
                cases = {
                    {8h01, 8h7f, 8h01},      // 1 < 127
                    {8hc0, 8h01, 8h01},      //-64 < 1
                    {8h01, 8hc0, 8h00},      // 1<-64
                    {8h90, 8hc0, 8h01}       // -111<-64 
                };

            4d14:
                // CMPLE
                alufn = b110111;
                cases = {
                    {8h01, 8h7f, 8h01},      // 1 < 127
                    {8h04, 8h04, 8h01},      // 4 == 4
                    {8hc0, 8hc0, 8h01},      // -64 == -64
                    {8h90, 8hc0, 8h01}       // -111<-64 
                };

            default:
                alufn = b000000;
                cases = {
                    {8h00, 8h00, 8h00},
                    {8h00, 8h00, 8h00},
                    {8h00, 8h00, 8h00},
                    {8h00, 8h00, 8h00}
                };

        }

        alu8_in = cases[timer.value][2:1];
        result = (alu8_out == cases[timer.value][0]);
    }
    
}
