/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    input sum,
    input carry,
    output reg pina,
    output reg pinb,
    output reg pinc
  );
  
  
  
  localparam STATE1_state = 4'd0;
  localparam STATE2_state = 4'd1;
  localparam STATE3_state = 4'd2;
  localparam STATE4_state = 4'd3;
  localparam STATE5_state = 4'd4;
  localparam STATE6_state = 4'd5;
  localparam STATE7_state = 4'd6;
  localparam STATE8_state = 4'd7;
  localparam ERROR_state = 4'd8;
  localparam SUCCESS_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = STATE1_state;
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    pina = 1'h0;
    pinb = 1'h0;
    pinc = 1'h0;
    io_led = 24'h000000;
    
    case (M_state_q)
      STATE1_state: begin
        M_counter_d = 1'h0;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h0 && sum == 1'h0) begin
          M_state_d = STATE2_state;
          io_led[0+0+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      STATE2_state: begin
        M_counter_d = M_counter_q + 1'h1;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h0 && sum == 1'h1) begin
          M_state_d = STATE3_state;
          io_led[0+1+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      STATE3_state: begin
        M_counter_d = M_counter_q + 1'h1;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h0 && sum == 1'h1) begin
          M_state_d = STATE4_state;
          io_led[0+2+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      STATE4_state: begin
        M_counter_d = M_counter_q + 1'h1;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h1 && sum == 1'h0) begin
          M_state_d = STATE5_state;
          io_led[0+3+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      STATE5_state: begin
        M_counter_d = M_counter_q + 1'h1;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h0 && sum == 1'h1) begin
          M_state_d = STATE6_state;
          io_led[0+4+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      STATE6_state: begin
        M_counter_d = M_counter_q + 1'h1;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h1 && sum == 1'h0) begin
          M_state_d = STATE7_state;
          io_led[0+5+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      STATE7_state: begin
        M_counter_d = M_counter_q + 1'h1;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h1 && sum == 1'h0) begin
          M_state_d = STATE8_state;
          io_led[0+6+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      STATE8_state: begin
        M_counter_d = M_counter_q + 1'h1;
        pina = M_counter_q[27+0-:1];
        pinb = M_counter_q[26+0-:1];
        pinc = M_counter_q[25+0-:1];
        if (carry == 1'h1 && sum == 1'h1) begin
          M_state_d = SUCCESS_state;
          io_led[0+7+0-:1] = 1'h1;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      SUCCESS_state: begin
        io_led[8+0+0-:1] = 1'h1;
      end
      ERROR_state: begin
        io_led[0+0+0-:1] = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_counter_q <= M_counter_d;
    
    if (rst_n == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
